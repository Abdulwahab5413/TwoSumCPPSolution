#include <iostream>
#include <queue>
#include <vector>
#include <string>
#include <unordered_map>

using namespace std;


struct Node {
    char ch;
    int freq;
    Node *left, *right;

    Node(char c, int f) {
        ch = c;
        freq = f;
        left = right = nullptr;
    }
};

struct Compare {
    bool operator()(Node* l, Node* r) {
        return l->freq > r->freq;  
    }
};


void preorderTraversal(Node* root, string code, unordered_map<char, string>& huffmanCodes) {
    if (root == nullptr)
        return;

    
    if (root->left == nullptr && root->right == nullptr) {
        huffmanCodes[root->ch] = code;
        cout << code << " ";
    }

    preorderTraversal(root->left, code + "0", huffmanCodes);
    preorderTraversal(root->right, code + "1", huffmanCodes);
}


Node* buildHuffmanTree(const vector<char>& S, const vector<int>& f) {
    
    priority_queue<Node*, vector<Node*>, Compare> minHeap;

    
    for (size_t i = 0; i < S.size(); i++) {
        minHeap.push(new Node(S[i], f[i]));
    }

    
    while (minHeap.size() > 1) {
       
        Node* left = minHeap.top();
        minHeap.pop();
        Node* right = minHeap.top();
        minHeap.pop();

        
        Node* internalNode = new Node('$', left->freq + right->freq);
        internalNode->left = left;
        internalNode->right = right;

        
        minHeap.push(internalNode);
    }

   
    return minHeap.top();
}

int main() {
    
    string S = "abcdef";
    vector<int> f = {5, 9, 12, 13, 16, 45};

    
    Node* root = buildHuffmanTree(S, f);

    
    unordered_map<char, string> huffmanCodes;
    preorderTraversal(root, "", huffmanCodes);

    return 0;
}