#include <iostream>
using namespace std;

class SparseMatrix {
public:
    struct Node {
        int row;
        int col;
        int value;
        Node* next;

        Node(int r, int c, int v) : row(r), col(c), value(v), next(nullptr) {}
    };

    SparseMatrix(int rows, int cols) : rows(rows), cols(cols), head(nullptr) {}

    void addElement(int row, int col, int value) {
        if (value != 0) {
            Node* newNode = new Node(row, col, value);
            if (!head) {
                head = newNode;
            } else {
                Node* temp = head;
                while (temp->next != nullptr) {
                    temp = temp->next;
                }
                temp->next = newNode;
            }
        }
    }

    void display() {
        cout << "Sparse Matrix representation (row, col, value):" << endl;
        Node* temp = head;
        while (temp != nullptr) {
            cout << "(" << temp->row << ", " << temp->col << ", " << temp->value << ")" << endl;
            temp = temp->next;
        }
    }

    int get(int row, int col) {
        Node* temp = head;
        while (temp != nullptr) {
            if (temp->row == row && temp->col == col) {
                return temp->value;
            }
            temp = temp->next;
        }
        return 0;
    }

    void fullDisplay() {
        for (int i = 0; i < rows; ++i) {
            for (int j = 0; j < cols; ++j) {
                cout << get(i, j) << " ";
            }
            cout << endl;
        }
    }

private:
    int rows, cols;
    Node* head;
};

int main() {
    SparseMatrix mat(5, 5); // 5x5 matrix

    mat.addElement(0, 0, 5);  // Adding element at (0, 0)
    mat.addElement(2, 3, 10); // Adding element at (2, 3)
    mat.addElement(4, 4, 3);  // Adding element at (4, 4)

    mat.display();
    cout << endl;

    mat.fullDisplay();
    return 0;
}