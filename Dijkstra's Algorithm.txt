#include <iostream>
#include <vector>
#include <climits>
#include <queue>
#include <unordered_map>

using namespace std;

struct Edge {
    int target;
    int weight;
};

class Graph {
public:
    unordered_map<int, vector<Edge>> adjList;

    void addEdge(int source, int target, int weight) {
        adjList[source].push_back({target, weight});
        adjList[target].push_back({source, weight});
    }

    vector<int> dijkstra(int start, int end) {
        
        priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> pq;
        unordered_map<int, int> dist; 
        unordered_map<int, int> parent;

        
        for (auto& node : adjList) {
            dist[node.first] = INT_MAX;
        }
        dist[start] = 0;
        pq.push({0, start});

        while (!pq.empty()) {
            int u = pq.top().second;
            pq.pop();

           
            if (u == end) break;

            for (auto& edge : adjList[u]) {
                int v = edge.target;
                int weight = edge.weight;

                if (dist[u] + weight < dist[v]) {
                    dist[v] = dist[u] + weight;
                    pq.push({dist[v], v});
                    parent[v] = u; 
                }
            }
        }

        
        vector<int> path;
        for (int at = end; at != start; at = parent[at]) {
            if (parent.find(at) == parent.end()) {
               
                path.clear();
                break;
            }
            path.push_back(at);
        }
        path.push_back(start);
        reverse(path.begin(), path.end());

        return path;
    }
};

int main() {
    Graph g;
    
   
    g.addEdge(0, 1, 10);
    g.addEdge(0, 2, 5);
    g.addEdge(1, 2, 2);
    g.addEdge(1, 3, 1);
    g.addEdge(2, 1, 3);
    g.addEdge(2, 3, 9);
    g.addEdge(2, 4, 2);
    g.addEdge(3, 4, 4);
    g.addEdge(4, 3, 6);
    
    int start, end;
    cout << "Enter start node: ";
    cin >> start;
    cout << "Enter end node: ";
    cin >> end;

    vector<int> shortestPath = g.dijkstra(start, end);

    if (shortestPath.empty()) {
        cout << "No path exists from node " << start << " to node " << end << endl;
    } else {
        cout << "Shortest path from node " << start << " to node " << end << " is: ";
        for (int node : shortestPath) {
            cout << node << " ";
        }
        cout << endl;

        
        int totalCost = 0;
        for (size_t i = 1; i < shortestPath.size(); ++i) {
            for (const Edge& edge : g.adjList[shortestPath[i - 1]]) {
                if (edge.target == shortestPath[i]) {
                    totalCost += edge.weight;
                    break;
                }
            }
        }
        cout << "The total cost of the path is: " << totalCost << endl;
    }

    return 0;
}